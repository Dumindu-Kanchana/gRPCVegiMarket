// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package serviceDefinition

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VegiMarketClient is the client API for VegiMarket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VegiMarketClient interface {
	GetVegetableNames(ctx context.Context, in *GetVegetableNamesRequest, opts ...grpc.CallOption) (*GetVegetableNamesResponse, error)
	GetPricePerUnit(ctx context.Context, in *GetPricePerUnitRequest, opts ...grpc.CallOption) (*GetPricePerUnitResponse, error)
	GetAmount(ctx context.Context, in *GetAmountRequest, opts ...grpc.CallOption) (*GetAmountResponse, error)
	AddVegetable(ctx context.Context, in *VegetableInfo, opts ...grpc.CallOption) (*AddUpdateVegetableResponse, error)
	UpdateVegetable(ctx context.Context, in *VegetableInfo, opts ...grpc.CallOption) (*AddUpdateVegetableResponse, error)
}

type vegiMarketClient struct {
	cc grpc.ClientConnInterface
}

func NewVegiMarketClient(cc grpc.ClientConnInterface) VegiMarketClient {
	return &vegiMarketClient{cc}
}

func (c *vegiMarketClient) GetVegetableNames(ctx context.Context, in *GetVegetableNamesRequest, opts ...grpc.CallOption) (*GetVegetableNamesResponse, error) {
	out := new(GetVegetableNamesResponse)
	err := c.cc.Invoke(ctx, "/service.definition.VegiMarket/GetVegetableNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegiMarketClient) GetPricePerUnit(ctx context.Context, in *GetPricePerUnitRequest, opts ...grpc.CallOption) (*GetPricePerUnitResponse, error) {
	out := new(GetPricePerUnitResponse)
	err := c.cc.Invoke(ctx, "/service.definition.VegiMarket/GetPricePerUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegiMarketClient) GetAmount(ctx context.Context, in *GetAmountRequest, opts ...grpc.CallOption) (*GetAmountResponse, error) {
	out := new(GetAmountResponse)
	err := c.cc.Invoke(ctx, "/service.definition.VegiMarket/GetAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegiMarketClient) AddVegetable(ctx context.Context, in *VegetableInfo, opts ...grpc.CallOption) (*AddUpdateVegetableResponse, error) {
	out := new(AddUpdateVegetableResponse)
	err := c.cc.Invoke(ctx, "/service.definition.VegiMarket/AddVegetable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegiMarketClient) UpdateVegetable(ctx context.Context, in *VegetableInfo, opts ...grpc.CallOption) (*AddUpdateVegetableResponse, error) {
	out := new(AddUpdateVegetableResponse)
	err := c.cc.Invoke(ctx, "/service.definition.VegiMarket/UpdateVegetable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VegiMarketServer is the server API for VegiMarket service.
// All implementations must embed UnimplementedVegiMarketServer
// for forward compatibility
type VegiMarketServer interface {
	GetVegetableNames(context.Context, *GetVegetableNamesRequest) (*GetVegetableNamesResponse, error)
	GetPricePerUnit(context.Context, *GetPricePerUnitRequest) (*GetPricePerUnitResponse, error)
	GetAmount(context.Context, *GetAmountRequest) (*GetAmountResponse, error)
	AddVegetable(context.Context, *VegetableInfo) (*AddUpdateVegetableResponse, error)
	UpdateVegetable(context.Context, *VegetableInfo) (*AddUpdateVegetableResponse, error)
	mustEmbedUnimplementedVegiMarketServer()
}

// UnimplementedVegiMarketServer must be embedded to have forward compatible implementations.
type UnimplementedVegiMarketServer struct {
}

func (UnimplementedVegiMarketServer) GetVegetableNames(context.Context, *GetVegetableNamesRequest) (*GetVegetableNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVegetableNames not implemented")
}
func (UnimplementedVegiMarketServer) GetPricePerUnit(context.Context, *GetPricePerUnitRequest) (*GetPricePerUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricePerUnit not implemented")
}
func (UnimplementedVegiMarketServer) GetAmount(context.Context, *GetAmountRequest) (*GetAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmount not implemented")
}
func (UnimplementedVegiMarketServer) AddVegetable(context.Context, *VegetableInfo) (*AddUpdateVegetableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVegetable not implemented")
}
func (UnimplementedVegiMarketServer) UpdateVegetable(context.Context, *VegetableInfo) (*AddUpdateVegetableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVegetable not implemented")
}
func (UnimplementedVegiMarketServer) mustEmbedUnimplementedVegiMarketServer() {}

// UnsafeVegiMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VegiMarketServer will
// result in compilation errors.
type UnsafeVegiMarketServer interface {
	mustEmbedUnimplementedVegiMarketServer()
}

func RegisterVegiMarketServer(s grpc.ServiceRegistrar, srv VegiMarketServer) {
	s.RegisterService(&VegiMarket_ServiceDesc, srv)
}

func _VegiMarket_GetVegetableNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVegetableNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegiMarketServer).GetVegetableNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.definition.VegiMarket/GetVegetableNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegiMarketServer).GetVegetableNames(ctx, req.(*GetVegetableNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegiMarket_GetPricePerUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricePerUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegiMarketServer).GetPricePerUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.definition.VegiMarket/GetPricePerUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegiMarketServer).GetPricePerUnit(ctx, req.(*GetPricePerUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegiMarket_GetAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegiMarketServer).GetAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.definition.VegiMarket/GetAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegiMarketServer).GetAmount(ctx, req.(*GetAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegiMarket_AddVegetable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VegetableInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegiMarketServer).AddVegetable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.definition.VegiMarket/AddVegetable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegiMarketServer).AddVegetable(ctx, req.(*VegetableInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegiMarket_UpdateVegetable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VegetableInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegiMarketServer).UpdateVegetable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.definition.VegiMarket/UpdateVegetable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegiMarketServer).UpdateVegetable(ctx, req.(*VegetableInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// VegiMarket_ServiceDesc is the grpc.ServiceDesc for VegiMarket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VegiMarket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.definition.VegiMarket",
	HandlerType: (*VegiMarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVegetableNames",
			Handler:    _VegiMarket_GetVegetableNames_Handler,
		},
		{
			MethodName: "GetPricePerUnit",
			Handler:    _VegiMarket_GetPricePerUnit_Handler,
		},
		{
			MethodName: "GetAmount",
			Handler:    _VegiMarket_GetAmount_Handler,
		},
		{
			MethodName: "AddVegetable",
			Handler:    _VegiMarket_AddVegetable_Handler,
		},
		{
			MethodName: "UpdateVegetable",
			Handler:    _VegiMarket_UpdateVegetable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serviceDefinition/market.proto",
}
